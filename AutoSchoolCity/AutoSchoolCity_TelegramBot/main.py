import telebot
from config import TOKEN
from telebot import types
from toNameCheckData import ukrainianAlphas
import os
from pydrive.auth import GoogleAuth

gauth = GoogleAuth()
gauth.LocalWebserverAuth()


bot = telebot.TeleBot(TOKEN)

def user_name_check(message):
    name_list = message.text.lower().split()
    if len(name_list) == 3:
        global name_str
        name_list = list(map(lambda el: el.capitalize(), name_list))

        user_name_confirm = True

        for el in name_list:
            letter_list = list(map(lambda letter: letter.lower() in ukrainianAlphas, el))
            if not all(letter_list):
                user_name_confirm = False

        if user_name_confirm:
            bot.send_message(message.chat.id, '‚úÖ–ß—É–¥–æ–≤–æ, —ñ–º\'—è –≤–≤–µ–¥–µ–Ω–æ!')
            name_str = ' '.join(name_list)

            if os.path.exists(f'newStudents/{name_str}'):
                os.rmdir(f'newStudents/{name_str}')

            os.mkdir(f'newStudents/{name_str}')

            user_email_input(message)
        else:
            example_name = '–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á'
            user_name_retry = bot.send_message(message.chat.id,
                                               text=f'‚ùå–£–ø—Å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞! <b>{message.from_user.first_name}</b>, –≤–≤–µ–¥—ñ—Ç—å <b>–ø–æ–≤–Ω–µ —ñ–º\'—è (–ü–Ü–ë) –∫–æ—Ä–µ–∫—Ç–Ω–æ</b>:\n<i>–ü—Ä–∏–∫–ª–∞–¥ –ø–æ–≤–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ: {example_name}</i>', parse_mode='html')
            bot.register_next_step_handler(user_name_retry, user_name_check)

    else:
        example_name = '–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á'
        user_name_retry = bot.send_message(message.chat.id, text=f'‚ùå–£–ø—Å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞! <b>{message.from_user.first_name}</b>, –≤–≤–µ–¥—ñ—Ç—å <b>–ø–æ–≤–Ω–µ —ñ–º\'—è (–ü–Ü–ë) –∫–æ—Ä–µ–∫—Ç–Ω–æ</b>:\n<i>–ü—Ä–∏–∫–ª–∞–¥ –ø–æ–≤–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ: {example_name}</i>', parse_mode='html')
        bot.register_next_step_handler(user_name_retry, user_name_check)


def user_email_check(message):
    global user_email

    user_email = message.text
    user_email_confirm = True

    if '@' not in user_email or '.' not in user_email:
        user_email_confirm = False

    if not user_email_confirm:
        example_email = 'mail@gmail.com'
        user_email = bot.send_message(message.chat.id,
                                      text=f'‚ùå–£–ø—Å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞! <b>{message.from_user.first_name}</b>, –≤–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –í–∞—à—É <b>–µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É –∫–æ—Ä–µ–∫—Ç–Ω–æ</b>:\n'
                                           f'<i>–ü—Ä–∏–∫–ª–∞–¥ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏: {example_email}</i>', parse_mode='html')
        bot.register_next_step_handler(user_email, user_email_check)
    else:
        if registered_email_check(user_email):
            bot.send_message(message.chat.id, f'‚ùå<b>{message.from_user.first_name}</b>, –í–∞—à–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –∞–¥—Ä–µ—Å–∞ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞', parse_mode='html')
            example_email = 'mail@gmail.com'
            user_email = bot.send_message(message.chat.id,
                                          text=f'‚ùå–£–ø—Å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞! <b>{message.from_user.first_name}</b>, –≤–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –í–∞—à—É <b>–µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É –∫–æ—Ä–µ–∫—Ç–Ω–æ</b>:\n'
                                               f'<i>–ü—Ä–∏–∫–ª–∞–¥ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏: {example_email}</i>', parse_mode='html')
            bot.register_next_step_handler(user_email, user_email_check)
        else:
            user_email_add(user_email)
            dir_rename()
            bot.send_message(message.chat.id, '‚úÖ–ß—É–¥–æ–≤–æ, –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É –≤–≤–µ–¥–µ–Ω–æ!')

def user_email_add(email):
    with open('registedUsers/registeredUsersEmail.txt', 'a', encoding='utf-8') as registered_file:
        print(email, file=registered_file)

def registered_email_check(email):

    with open('registedUsers/registeredUsersEmail.txt', 'r', encoding='utf-8') as registered_file:
        if email in registered_file.readlines():
            return True
        return False

def dir_rename():
    os.rename(f'newStudents/{name_str}', f'newStudents/{name_str + " " + user_email}')


@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ù–æ–≤–∏–π —É—á–µ–Ω—åüë®‚Äçüéì')
    btn2 = types.KeyboardButton('–í–∂–µ –Ω–∞–≤—á–∞—é—Å—åüöò')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, text=f'üëã<b>–ê–≤—Ç–æ—à–∫–æ–ª–∞ \"City Driving School\"</b> –≤—ñ—Ç–∞—î –í–∞—Å, <b>{message.from_user.first_name}</b>!'
                                           f'\nüôè–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à —Å—Ç–∞—Ç—É—Å:', reply_markup=markup, parse_mode='html')

@bot.message_handler(func=lambda message: message.text == '–ù–æ–≤–∏–π —É—á–µ–Ω—åüë®‚Äçüéì')
def new_user(message):
    example_name = '–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á'
    user_name = bot.send_message(message.chat.id, text=f'<b>{message.from_user.first_name}</b>, –¥–ª—è —Ç–æ–≥–æ, —â–æ–± —Å—Ç–∞—Ç–∏ –Ω–∞—à–∏–º —É—á–Ω–µ–º –≤–≤–µ–¥—ñ—Ç—å –í–∞—à–µ <b>–ø–æ–≤–Ω–µ —ñ–º\'—è (–ü–Ü–ë)</b>:'
                                                       f'\n<i>–ü—Ä–∏–∫–ª–∞–¥ –ø–æ–≤–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ: {example_name}</i>', reply_markup=types.ReplyKeyboardRemove(), parse_mode='html')
    bot.register_next_step_handler(user_name, user_name_check)

@bot.message_handler(func=lambda message: message.text == '–ù–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Çü™™')
def new_format_id_upload(message):
    bot.send_message(message.chat.id, text=f'ü™™<b>{message.from_user.first_name}</b>, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ñ–æ—Ç–æ –í–∞—à–æ—ó <b>ID-–∫–∞—Ä—Ç–∫–∏</b>'
                                           f'\n‚ùó<b><i>–ó –î–í–û–• –°–¢–û–†–Ü–ù</i></b>‚ùó', reply_markup=types.ReplyKeyboardRemove(), parse_mode='html')


def user_email_input(message):
    example_email = 'mail@gmail.com'
    user_email = bot.send_message(message.chat.id, text=f'<b>{message.from_user.first_name}</b>, –≤–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É:\n'
                                                        f'<i>–ü—Ä–∏–∫–ª–∞–¥ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏: {example_email}</i>', parse_mode='html')
    bot.register_next_step_handler(user_email, user_email_check)

def user_documents_input(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_id_type_new = types.KeyboardButton('–ù–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Çü™™')
    btn_id_type_old = types.KeyboardButton('–°—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Çüìñ')
    markup.add(btn_id_type_new, btn_id_type_old)
    bot.send_message(message.chat.id, text=f'<b>{message.from_user.first_name}</b>, –æ–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –í–∞—à–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç—É:\n'
                                           f'<i>\"–ù–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç\" -> ID-–∫–∞—Ä—Ç–∫–∞\n'
                                           f'\"–°—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç\" -> –ø–∞—Å–ø–æ—Ä—Ç-–∫–Ω–∏–∂–∫–∞</i>', parse_mode='html', reply_markup=markup)

bot.polling(True)




